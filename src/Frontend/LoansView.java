package Frontend;

import API.Controller;
import Account.Loan.Loan;
import Person.Customer.Customer;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class LoansView extends AbstractJPanel {
    private JPanel basePanel;
    private JButton backButton;
    private JTabbedPane tabbedPane1;
    private JPanel approvedLoans;
    private JPanel pendingLoans;
    private Customer customer;
    private Boolean managerView;

    public LoansView(Boolean hideBackButton, Customer customer, Boolean managerView) {
        this.customer = customer;
        approvedLoans.setLayout(new BoxLayout(approvedLoans, BoxLayout.Y_AXIS));
        pendingLoans.setLayout(new BoxLayout(pendingLoans, BoxLayout.Y_AXIS));
        if (hideBackButton) {
            backButton.setVisible(false);
        }
        this.managerView = managerView;

        refresh();

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Frontend.getInstance().back();
            }
        });
    }

    public void refresh() {
        List<Loan> approvedLoans;
        List<Loan> pendingLoans;
        if (this.customer != null) {
            approvedLoans = new ArrayList<>();
            pendingLoans = new ArrayList<>();
            List<Loan> allLoans = Controller.getLoansByCustomer(this.customer);
            for (int i = 0; allLoans != null && i < allLoans.size(); i++) {
                Loan loan = allLoans.get(i);
                if (loan.isApproved()) {
                    approvedLoans.add(loan);
                } else {
                    pendingLoans.add(loan);
                }
            }
        } else {
            approvedLoans = Controller.getApprovedLoanList();
            pendingLoans = Controller.getUnapprovedLoanList();
        }
        loadLoanPanel(approvedLoans, this.approvedLoans, false, !this.managerView);
        loadLoanPanel(pendingLoans, this.pendingLoans, this.managerView, false);
    }

    public void loadLoanPanel(List<Loan> loans, JPanel panel, Boolean showApproveButton, Boolean showPayButton) {
        panel.removeAll();
        if (loans != null) {
            for (Loan loan : loans) {
                panel.add((new LoanView(loan, showApproveButton, this, showPayButton)).getBasePanel());
            }
        }
        panel.revalidate();
    }

    @Override
    public JPanel getBasePanel() {
        return basePanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        basePanel = new JPanel();
        basePanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        backButton = new JButton();
        backButton.setText("Back");
        basePanel.add(backButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        basePanel.add(spacer1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        tabbedPane1 = new JTabbedPane();
        basePanel.add(tabbedPane1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Approved", panel1);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        approvedLoans = new JPanel();
        approvedLoans.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(approvedLoans);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Pending", panel2);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pendingLoans = new JPanel();
        pendingLoans.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane2.setViewportView(pendingLoans);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return basePanel;
    }

}
